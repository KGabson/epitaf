#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyLiveMesh.Web.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="mylivemesh-tmp-tom")]
	public partial class MyLiveMeshDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertsharing(sharing instance);
    partial void Updatesharing(sharing instance);
    partial void Deletesharing(sharing instance);
    #endregion
		
		public MyLiveMeshDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["mylivemesh_tmp_tomConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyLiveMeshDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLiveMeshDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLiveMeshDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLiveMeshDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<sharing> sharings
		{
			get
			{
				return this.GetTable<sharing>();
			}
		}
	}
	
	[Table(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _login;
		
		private string _password;
		
		private string _email;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public user()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_login", DbType="NChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="NChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="NChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sharing")]
	public partial class sharing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _owner_id;
		
		private System.Nullable<int> _friend_id;
		
		private System.Nullable<int> _friend_is_owner;
		
		private string _folder_path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onowner_idChanging(System.Nullable<int> value);
    partial void Onowner_idChanged();
    partial void Onfriend_idChanging(System.Nullable<int> value);
    partial void Onfriend_idChanged();
    partial void Onfriend_is_ownerChanging(System.Nullable<int> value);
    partial void Onfriend_is_ownerChanged();
    partial void Onfolder_pathChanging(string value);
    partial void Onfolder_pathChanged();
    #endregion
		
		public sharing()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_owner_id", DbType="Int")]
		public System.Nullable<int> owner_id
		{
			get
			{
				return this._owner_id;
			}
			set
			{
				if ((this._owner_id != value))
				{
					this.Onowner_idChanging(value);
					this.SendPropertyChanging();
					this._owner_id = value;
					this.SendPropertyChanged("owner_id");
					this.Onowner_idChanged();
				}
			}
		}
		
		[Column(Storage="_friend_id", DbType="Int")]
		public System.Nullable<int> friend_id
		{
			get
			{
				return this._friend_id;
			}
			set
			{
				if ((this._friend_id != value))
				{
					this.Onfriend_idChanging(value);
					this.SendPropertyChanging();
					this._friend_id = value;
					this.SendPropertyChanged("friend_id");
					this.Onfriend_idChanged();
				}
			}
		}
		
		[Column(Storage="_friend_is_owner", DbType="Int")]
		public System.Nullable<int> friend_is_owner
		{
			get
			{
				return this._friend_is_owner;
			}
			set
			{
				if ((this._friend_is_owner != value))
				{
					this.Onfriend_is_ownerChanging(value);
					this.SendPropertyChanging();
					this._friend_is_owner = value;
					this.SendPropertyChanged("friend_is_owner");
					this.Onfriend_is_ownerChanged();
				}
			}
		}
		
		[Column(Storage="_folder_path", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string folder_path
		{
			get
			{
				return this._folder_path;
			}
			set
			{
				if ((this._folder_path != value))
				{
					this.Onfolder_pathChanging(value);
					this.SendPropertyChanging();
					this._folder_path = value;
					this.SendPropertyChanged("folder_path");
					this.Onfolder_pathChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
