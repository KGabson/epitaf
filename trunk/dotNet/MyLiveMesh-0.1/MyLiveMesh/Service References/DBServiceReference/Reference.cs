//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace MyLiveMesh.DBServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBServiceReference.IDBService")]
    public interface IDBService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/Authentify", ReplyAction="http://tempuri.org/IDBService/AuthentifyResponse")]
        System.IAsyncResult BeginAuthentify(string login, string pass, System.AsyncCallback callback, object asyncState);
        
        bool EndAuthentify(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IDBServiceChannel : MyLiveMesh.DBServiceReference.IDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AuthentifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthentifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DBServiceClient : System.ServiceModel.ClientBase<MyLiveMesh.DBServiceReference.IDBService>, MyLiveMesh.DBServiceReference.IDBService {
        
        private BeginOperationDelegate onBeginAuthentifyDelegate;
        
        private EndOperationDelegate onEndAuthentifyDelegate;
        
        private System.Threading.SendOrPostCallback onAuthentifyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DBServiceClient() {
        }
        
        public DBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AuthentifyCompletedEventArgs> AuthentifyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MyLiveMesh.DBServiceReference.IDBService.BeginAuthentify(string login, string pass, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthentify(login, pass, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MyLiveMesh.DBServiceReference.IDBService.EndAuthentify(System.IAsyncResult result) {
            return base.Channel.EndAuthentify(result);
        }
        
        private System.IAsyncResult OnBeginAuthentify(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string pass = ((string)(inValues[1]));
            return ((MyLiveMesh.DBServiceReference.IDBService)(this)).BeginAuthentify(login, pass, callback, asyncState);
        }
        
        private object[] OnEndAuthentify(System.IAsyncResult result) {
            bool retVal = ((MyLiveMesh.DBServiceReference.IDBService)(this)).EndAuthentify(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthentifyCompleted(object state) {
            if ((this.AuthentifyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthentifyCompleted(this, new AuthentifyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthentifyAsync(string login, string pass) {
            this.AuthentifyAsync(login, pass, null);
        }
        
        public void AuthentifyAsync(string login, string pass, object userState) {
            if ((this.onBeginAuthentifyDelegate == null)) {
                this.onBeginAuthentifyDelegate = new BeginOperationDelegate(this.OnBeginAuthentify);
            }
            if ((this.onEndAuthentifyDelegate == null)) {
                this.onEndAuthentifyDelegate = new EndOperationDelegate(this.OnEndAuthentify);
            }
            if ((this.onAuthentifyCompletedDelegate == null)) {
                this.onAuthentifyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthentifyCompleted);
            }
            base.InvokeAsync(this.onBeginAuthentifyDelegate, new object[] {
                        login,
                        pass}, this.onEndAuthentifyDelegate, this.onAuthentifyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MyLiveMesh.DBServiceReference.IDBService CreateChannel() {
            return new DBServiceClientChannel(this);
        }
        
        private class DBServiceClientChannel : ChannelBase<MyLiveMesh.DBServiceReference.IDBService>, MyLiveMesh.DBServiceReference.IDBService {
            
            public DBServiceClientChannel(System.ServiceModel.ClientBase<MyLiveMesh.DBServiceReference.IDBService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAuthentify(string login, string pass, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = pass;
                System.IAsyncResult _result = base.BeginInvoke("Authentify", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAuthentify(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Authentify", _args, result)));
                return _result;
            }
        }
    }
}
